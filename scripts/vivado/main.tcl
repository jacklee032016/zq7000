
# 
# No.1: Create Project
#

#Create output directory and clear contents
set PROJECT_NAME zq7First

set OUTPUT_DIR ./$PROJECT_NAME


file mkdir $OUTPUT_DIR
set files [glob -nocomplain "$OUTPUT_DIR/*"]
if {[llength $files] != 0} {
    puts "deleting contents of $OUTPUT_DIR"
    file delete -force {*}[glob -directory $OUTPUT_DIR *]; # clear folder contents
} else {
    puts "output folder: '$OUTPUT_DIR' is empty"
}


# same effect for following 2 options
#set PROJECT_BOARD [get_board_parts "*:microzed_7020:*" -latest_file_version]
#set BOARD_PART [get_property PART_NAME [get_board_parts $PROJECT_BOARD]]

set PROJECT_BOARD "em.avnet.com:microzed_7020:part0:1.0"
set BOARD_PART "xc7z020clg400-1"


puts "PROJECT_BOARD:'$PROJECT_BOARD'"
puts "BOARD_PART:[get_property PART_NAME [get_board_parts $PROJECT_BOARD]]"

# first is project name, the second is output folder for this project, otherwise, current working folder;
create_project -force -part $BOARD_PART $PROJECT_NAME $OUTPUT_DIR
set_property board_part $PROJECT_BOARD [current_project]


set proj_dir hwflow_project_1
set output_dir outputs
set board microzed_7020
#set device 7z020
#set rev None
#set output {xsa bit}
#set xdc_list {xdc/default.xdc xdc/zc702.xdc xdc/pl_zc702.xdc}
set ip_repo_path {}
set src_repo_path {}


# 
# No.2: constrains
#


# import_files -fileset constrs_1 $xdc_list
        

# 
# No.3: block design diagram
#

set_property ip_repo_paths $ip_repo_path [current_project] 
update_ip_catalog
    
# Create block diagram design and set as current design
set design_name $PROJECT_NAME
create_bd_design $PROJECT_NAME
current_bd_design $PROJECT_NAME

# Set current bd instance as root of current design
set parentCell [get_bd_cells /]
set parentObj  [get_bd_cells $parentCell]
current_bd_instance $parentObj


# 
# No.3: block design diagram
#

source ./zq7_cfg_bd.tcl
    
save_bd_design
    
assign_bd_address
        

make_wrapper -files [get_files ./$PROJECT_NAME/${PROJECT_NAME}.srcs/sources_1/bd/$PROJECT_NAME/${PROJECT_NAME}.bd] -top
import_files -force -norecurse ./$PROJECT_NAME/${PROJECT_NAME}.srcs/sources_1/bd/$PROJECT_NAME/hdl/${PROJECT_NAME}_wrapper.v


update_compile_order
set_property top ${PROJECT_NAME}_wrapper [current_fileset]
update_compile_order -fileset sources_1
        

save_bd_design
validate_bd_design
generate_target all [get_files ./$PROJECT_NAME/${PROJECT_NAME}.srcs/sources_1/bd/$PROJECT_NAME/${PROJECT_NAME}.bd]
file mkdir ./$PROJECT_NAME/$output_dir
        

set fd [open ./$PROJECT_NAME/$output_dir/README.hw w] 

puts $fd "##########################################################################"
puts $fd "This is a brief document containing design specific details for : ${board}"
puts $fd "This is auto-generated by Petalinux ref-design builder created @ [clock format [clock seconds] -format {%a %b %d %H:%M:%S %Z %Y}]"
puts $fd "##########################################################################"

set board_part [get_board_parts [current_board_part -quiet]]
if { $board_part != ""} {
	puts $fd "BOARD: $board_part" 
}

set design_name [get_property NAME [get_bd_designs]]
puts $fd "BLOCK DESIGN: $design_name" 


set columns {%40s%30s%15s%50s}
puts $fd [string repeat - 150]
puts $fd [format $columns "MODULE INSTANCE NAME" "IP TYPE" "IP VERSION" "IP"]
puts $fd [string repeat - 150]

foreach ip [get_ips] {
	set catlg_ip [get_ipdefs -all [get_property IPDEF $ip]]	
	puts $fd [format $columns [get_property NAME $ip] [get_property NAME $catlg_ip] [get_property VERSION $catlg_ip] [get_property VLNV $catlg_ip]]
}

close $fd

    
set_property synth_checkpoint_mode Hierarchical [get_files ./$PROJECT_NAME/${PROJECT_NAME}.srcs/sources_1/bd/$PROJECT_NAME/${PROJECT_NAME}.bd]
launch_runs synth_1 -jobs 32
wait_on_run synth_1
    
launch_runs impl_1 -to_step write_bitstream
            
wait_on_run impl_1
        

file copy -force ./$PROJECT_NAME/${PROJECT_NAME}.runs/impl_1/${PROJECT_NAME}_wrapper.bit ./$PROJECT_NAME/$output_dir/${PROJECT_NAME}.bit
        
set_property platform.board_id $PROJECT_NAME [current_project]
            
set_property platform.extensible false [current_project]
            
set_property platform.ip_cache_dir [get_property ip_output_repo [current_project]] [current_project]
            
set_property platform.name $PROJECT_NAME [current_project]
            
set_property platform.vendor "xilinx" [current_project]
            
set_property platform.version "1.0" [current_project]
            
open_run impl_1        
write_hw_platform -fixed -force -include_bit -file ./$PROJECT_NAME/$output_dir/${PROJECT_NAME}.xsa
validate_hw_platform -verbose ./$PROJECT_NAME/$output_dir/${PROJECT_NAME}.xsa
            
# exit from vivado.bat, return to shell environment           
# exit
        